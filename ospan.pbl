define FindFirstIndex( aList, aItem )
{
	rval<-0
	found<-0

	Loop( item, aLIst )
	{
		if ( found ==0 )
		{
			rval<-rval+1 
			if ( item == aItem )
			{
				found<-1
			}
		}
	}
	return rval
}

define PrefixPrintList(aPrefix,aList)
{
	i<-1
	str<-""
	while ( i <= Length(aList))
	{
		str<-str+Nth(aList,i)
		i<-i+1
	}
	Print(aPrefix+str)	
}

define PrintList(aList)
{
	PrefixPrintList("",aList)
}

define LogSpam( str )
{
	Print( str )
}

define PresentRun(aNumLetters)
{
  gridText<-SampleN(  ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"], gGridNumCol * gGridNumRow)
	testVals<-SampleN(gridText, aNumLetters)

	winSz<-[gVideoWidth,gVideoHeight]

	PrefixPrintList("Grid:",gridText)
	PrefixPrintList("Test:",testVals)

	Loop( testVal, testVals )
	{

		lText <- MakeLabel(testVal, gLgFont)
		xPos<- gVideoWidth/2
		yPos<- gVideoHeight/2
		Move(lText, xPos,yPos)
		AddObject(lText,gWin)
		Draw()
		Wait(gDispMS)
		RemoveObject(lText,gWin)
	}

	gridSpace <- 3 * gLgFontSz
	gridTop <- gVideoHeight/2
	gridLeft <- gVideoWidth/2

	# the main grid of letters
	gridTop<-gridTop-gridSpace*(gGridNumRow-1)*0.5
	gridLeft<-gridLeft-gridSpace*(gGridNumCol-1)*0.5

	i <- 1
	gridLabels<-[]
	xOffset<-0
	yOffset<-0
	while ( i <= gGridNumCol * gGridNumRow )
	{
		xOffset <- Mod( i-1, gGridNumCol)
		yOffset <- Floor((i-1) / gGridNumCol)

		PushOnEnd(gridLabels, MakeLabel(Nth(gridText,i), gLgFont) )

		Move(Nth(gridLabels,i), gridLeft + xOffset * gridSpace, gridTop + yOffset * gridSpace ) 
		AddObject(Nth(gridLabels,i),gWin)

		i<-i+1
	}

	# the grid/row of user selections	
	gridTop<-gridTop + yOffset * gridSpace + 1.5 * gridSpace
	gridLeft<-gVideoWidth/2-gridSpace*(Length(testVals)-1)*0.5

	selLabels<-[]
	i<-1
	while ( i <= Length(testVals))
	{
		PushOnEnd(selLabels, MakeLabel( gNoSelectionChar, gLgFont ) )	
		Move(Nth(selLabels,i), gridLeft + ( i - 1 ) * gridSpace, gridTop )
		AddObject(Nth(selLabels,i), gWin )
		i<-i+1
	}

	delLabel<-MakeLabel("Del", gLgFont)
	clearLabel<-MakeLabel("Clear", gLgFont)

	# put these a little below the selection row
	gridTop<-Round(gridTop * 1.1 )
	okLabel<-MakeLabel("Done", gLgFont_Disabled)
	Move( okLabel, gridLeft + ( i - 1 ) * gridSpace, gridTop )	# i was incremented after adding last
	AddObject( okLabel , gWin )

	delLabel<-MakeLabel("Del", gLgFont )
	AddObject( delLabel, gWin )
	Move( delLabel, gridLeft - gridSpace, gridTop )

	clrLabel<-MakeLabel("Clear", gLgFont )
	AddObject( clrLabel, gWin )
	Move( clrLabel, gridLeft - 2*gridSpace-Nth(GetSize(delLabel),1), gridTop )

	Draw()

	# get input
	userInput<-GetMouseInput(gridLabels,gridText,selLabels,okLabel,delLabel,clrLabel)
	PrefixPrintList("UserInput", userInput )
}

define GetMouseInput(gridLabels,gridText,selLabels,okLabel,delLabel,clrLabel)
{
	ShowCursor(1)
	SetMouseCursorPosition(Round(gVideoWidth/2), Round(gVideoHeight/2))

	chkLabels<-[]
	chkText<-[]
	i<-1
	while ( i <= Length( gridLabels ) )
	{
		PushOnEnd( chkLabels, Nth(gridLabels, i ) )
		PushOnEnd( chkText, Nth(gridText, i ) )
		i<-i+1
	}

	clearText<-"clr"
	okText<-"ok"
	delText<-"del"

	PushOnEnd( chkLabels, okLabel )
	PushOnEnd( chkText, okText )

	PushOnEnd( chkLabels, delLabel )
	PushOnEnd( chkText, delText )

	PushOnEnd( chkLabels, clrLabel )
	PushOnEnd( chkText, clearText )

	rval<-[]
	done<-0
	while ( done == 0 )
	{
		resp<-WaitForClickOnTarget( chkLabels, chkText )

		if ( resp == clearText )
		{
			if ( Length(rval ) > 0 )
			{
				SetFont( okLabel,	gLgFont_Disabled )
				if ( not gDisableGridSelections == 0 )
				{
					Loop( removed, rval )
					{
						idx<-FindFirstIndex( chkText, removed )
						SetFont( Nth(chkLabels, idx ), gLgFont )
					}
				}
				Loop( selLabel, selLabels )
				{
					SetText( selLabel, gNoSelectionChar )
				}
				rval<-[]
				Draw()
			}
		} elseif( resp == okText ) {
			if ( Length(rval) == Length(selLabels) )
			{
				done<-1
			}
		} elseif( resp == delText )
		{
			if ( Length( rval ) > 0 )
			{
				SetFont( okLabel,	gLgFont_Disabled )
				removed<-Nth(rval, Length(rval))
				if ( not gDisableGridSelections == 0 )
				{
					idx<-FindFirstIndex( chkText, removed )
					SetFont( Nth(chkLabels, idx ), gLgFont )
				}
				SetText( Nth(selLabels, Length(rval)), gNoSelectionChar )
				rval<-RemoveSubset(rval, List(Length(rval)))

				Draw()
			}
		} elseif ( Length(rval) < Length(selLabels) )
		{
			if ( not IsMember( resp, rval ) )
			{
				PushOnEnd(rval, resp )
				SetText( Nth(selLabels, Length(rval)), resp )

				if ( not gDisableGridSelections == 0 )
				{
					idx<-FindFirstIndex( chkText, resp )
					SetFont( Nth(chkLabels, idx ), gLgFont_Disabled )
				}

				if ( Length(rval) == Length(selLabels) )
				{
					# make the done label look clickable
					SetFont( okLabel,	gLgFont )
				}
				Draw()
			}
		} 
	}
	ShowCursor(0)

	return rval
}

define DrawDebug()
{
	gDebugLab1<-MakeLabel("gVideoWidth="+gVideoWidth, gDbgFont)
	AddObject( gDebugLab1, gWin )
	Move( gDebugLab1, 100, 10 )

	gDebugLab2<-MakeLabel("gVideoHeight="+gVideoHeight, gDbgFont)
	Move( gDebugLab2, 110, 30 )
	AddObject( gDebugLab2, gWin )

	gYAxis<-ThickLine(gVideoWidth/2, 0, gVideoWidth/2, gVideoHeight, 2, gDbgColor )
	AddObject( gYAxis, gWin )

	gXAxis<-ThickLine(0, gVideoHeight/2, gVideoWidth, gVideoHeight/2, 2, gDbgColor )
	AddObject( gXAxis, gWin )
}

define Start(par)
{
	ShowCursor(0)

	gDispMS <- 500

	# globals
	gGridNumCol<-3
	gGridNumRow<-4

	gFGColor <- MakeColor("black")
	gFGDisabledColor <- MakeColor("grey")
	gBGColor <- MakeColor("white")

	gDbgColor <-MakeColor("grey90")

	# when a user selects a grid item, draw it as disabled to 
	# suggest they can't select again
	gDisableGridSelections<-1
	gNoSelectionChar<-"*"

	gLgFontSz<-40
  gLgFont <- MakeFont("Vera.ttf",0,gLgFontSz,gFGColor,gBGColor,0)
  gLgFont_Disabled <- MakeFont("Vera.ttf",0,gLgFontSz,gFGDisabledColor,gBGColor,0)
	gSmlFont<- MakeFont( "Vera.ttf",0,20,gFGColor,gBGColor,0)
	gDbgFont<-MakeFont(  "Vera.ttf",0,20,gDbgColor,gBGColor,0)

  gWin <- MakeWindow("white")
	DrawDebug()


	#Draw()
	#WaitForAnyKeyPress()

  #s<-SampleN(  ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"], gGridNumCol * gGridNumRow)
	#PrintList(s)
	PresentRun(5)
}
